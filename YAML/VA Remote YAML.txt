esphome:
  name: Your_Device_Name
  friendly_name: Your_Device_Name
  on_boot:
    then:
      - script.execute: sleep_routine
      - switch.turn_on: neopwr
      - script.execute: wifi_check

esp32:
  board: adafruit_feather_esp32_v2
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Your API Key"

ota:
  password: "Your OTA PWD"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on
  power_save_mode: LIGHT
  manual_ip:
   static_ip: Your.IP
   gateway: Your.Gateway
   subnet: Your.Subnet
   dns1: Your.DNS

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Your Fallback Hotspot"
    password: "Fallback Hotspot PWD"

captive_portal:

switch:
  - platform: gpio
    pin: GPIO2
    id: neopwr
    internal: true

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: WS2812
    rmt_channel: 0
    id: neopixel
    name: neopixel
    pin: GPIO0
    num_leds: 1
    default_transition_length: 0s #you can lengthen this to soften the LED transitions

i2s_audio:
  - id: i2s_mic
    i2s_lrclk_pin: GPIO15
    i2s_bclk_pin: GPIO33
  - id: i2s_amp
    i2s_lrclk_pin: GPIO21
    i2s_bclk_pin: GPIO5

microphone:
  - platform: i2s_audio
    id: feather_microphone
    adc_type: external 
    i2s_audio_id: i2s_mic 
    i2s_din_pin: GPIO27
    pdm: false

speaker: #media player won't work currently with Piper, have to use speaker component. Media player works with cloud.
  - platform: i2s_audio
    id: media_out
    dac_type: external
    i2s_audio_id: i2s_amp
    i2s_dout_pin: GPIO19
    mode: mono

sensor:
  - platform: adc
    pin: 35
    name: "Battery Voltage"
    update_interval: 20s
    attenuation: 11db #required
    filters:
     - multiply: 2.0
     - offset: 0.00 #trim reading by adjusting this value

output:
  - platform: gpio
    pin: GPIO4
    id: Amp_Power
  - platform: gpio
    pin: GPIO32
    id: Mic_Power

voice_assistant:
  microphone: feather_microphone
  speaker: media_out
  on_start:
    - script.stop: wifi_check #this script just updates the notification LED for wifi status. It's diabled during voice assist so it doesn't interfere with the indicator LED status during VA use
    - light.turn_on: 
        id: neopixel
        brightness: 100%
        color_brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
    - output.turn_on: Mic_Power #turn on mic power
    - output.turn_on: Amp_Power #enable MAX98357 power
  on_tts_start:
    - light.turn_on: 
        id: neopixel
        brightness: 100%
        color_brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
  on_tts_end:
    - light.turn_on: 
        id: neopixel
        brightness: 100%
        color_brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
  on_end:
    - delay: 1s
    - wait_until:
        not:
          speaker.is_playing: media_out
    - light.turn_off: neopixel
    - script.execute: wifi_check
    - output.turn_off: Mic_Power #power off Mic when not used
    - output.turn_off: Amp_Power #uses Amp SD pin to shut off amp when not being used.
  on_error:
    - light.turn_on: 
        id: neopixel
        brightness: 100%
        color_brightness: 100%
        red: 100%
        green: 0%
        blue: 0%
    - delay: 1s
    - light.turn_off: neopixel #set status LED to blank, to clear VA status and prep for Wifi check
    - script.execute: wifi_check

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO14
      inverted: False
    name: Button
    id: remote_button
    filters:
      - delayed_on: 10ms #debounce time

    on_multi_click:
      - timing:
          - ON FOR AT LEAST 350ms
        then:
          - voice_assistant.start:
      - timing:
          - ON FOR AT LEAST 350ms
          - OFF FOR AT LEAST 10ms
        then:
          - voice_assistant.stop:
          
    on_press: 
      then:
        - script.stop: sleep_routine #this resets the sleep timer every time the button is pressed
        - logger.log: "sleep reset"
        - script.execute: sleep_routine

deep_sleep:
  id: deep_sleep_1
  sleep_duration: 1h # how long to sleep before rewaking
  esp32_ext1_wakeup: #regular GPIO wakeup had some issues on some boards. Ext1 seems to work on everything.
    pins:
      - 14
    mode: ANY_HIGH

script:
  - id: sleep_routine
    then:
    - logger.log: "sleep timer initiated"
    - delay: 30s  # sleep timeout length, adjust as necessary, longer time = device stays awake longer
    - switch.turn_off: neopwr
    - logger.log: "entering sleep"
    - deep_sleep.enter: deep_sleep_1
  - id: wifi_check
    then:
    - light.turn_on: 
        id: neopixel
        color_brightness: 25%
        red: 100%
        green: 67%
        blue: 0%
    - wait_until:
       wifi.connected:
    - light.turn_on: 
        id: neopixel
        color_brightness: 25%
        red: 0%
        green: 0%
        blue: 100%
